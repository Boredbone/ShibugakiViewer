<UserControl x:Class="ShibugakiViewer.Views.Pages.SlideshowPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:ShibugakiViewer.Views.Pages"
             xmlns:behaviors="clr-namespace:ShibugakiViewer.Views.Behaviors"
             xmlns:tb="clr-namespace:WpfTools.Behaviors;assembly=WpfTools"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
             xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions" 
             xmlns:control="clr-namespace:ShibugakiViewer.Views.Controls"
             xmlns:cc="clr-namespace:WpfTools.Controls;assembly=WpfTools"
             xmlns:file="clr-namespace:ImageLibrary.File;assembly=ImageLibrary"
             xmlns:properties="clr-namespace:ShibugakiViewer.Properties"
             x:Name="pageRoot"
             mc:Ignorable="d" 
             behaviors:VisualStateBehavior.State="{Binding VisualState.Value,Mode=OneWay}"
             DataContextChanged="pageRoot_DataContextChanged"
             d:DesignHeight="300" d:DesignWidth="300">

    <UserControl.Resources>
        <Style TargetType="{x:Type cc:FlatButton}" x:Key="toolButtonStyle"
           BasedOn="{StaticResource themeSymbolFlatButtonStyle}">
            <Style.Setters>
                <Setter Property="Width" Value="{StaticResource ToolButtonWidth}"/>
                <Setter Property="Height" Value="{StaticResource ToolButtonWidth}"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
            </Style.Setters>
        </Style>
        <Style TargetType="{x:Type cc:FlatToggleButton}" x:Key="toolToggleButtonStyle"
           BasedOn="{StaticResource themeSymbolFlatToggleButtonStyle}">
            <Style.Setters>
                <Setter Property="Width" Value="{StaticResource ToolButtonWidth}"/>
                <Setter Property="Height" Value="{StaticResource ToolButtonWidth}"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
            </Style.Setters>
        </Style>
    </UserControl.Resources>
    
    <Grid Background="{DynamicResource BasicBackColor}">
        <Grid x:Name="imageGrid" SizeChanged="imageGrid_SizeChanged"
                  HorizontalAlignment="Stretch" VerticalAlignment="Stretch">

            <Viewbox StretchDirection="DownOnly">
                <Grid>
            <Image x:Name="currentImage"
                   Canvas.ZIndex="0"
                   Stretch="Uniform"
                   DataContext="{Binding CurrentImage}"
                    Height="{Binding Height,Mode=OneWay}"
                    Width="{Binding Width,Mode=OneWay}" 
                   HorizontalAlignment="Center" VerticalAlignment="Center">
                <i:Interaction.Behaviors>
                    <behaviors:ImageBehavior
                        Record="{Binding}"
                        DecodeHeight="512"
                        DecodeWidth="512"
                        Quality="Resized"
                        />
                </i:Interaction.Behaviors>
            </Image>

            <!--
            <Image x:Name="animationImage" Canvas.ZIndex="1"
                    Height="{Binding Height,Mode=OneWay}"
                    Width="{Binding Width,Mode=OneWay}" 
                       Stretch="{Binding ElementName=currentImage,Path=Stretch,Mode=OneWay}"
                       HorizontalAlignment="Center" VerticalAlignment="Center"/>-->

                </Grid>
            </Viewbox>
            <Viewbox StretchDirection="DownOnly">
                <Grid>
            <Image x:Name="nextImage"
                   Canvas.ZIndex="2" Opacity="0"
                   Stretch="Uniform"
                   DataContext="{Binding NextImage}"
                    Height="{Binding Height,Mode=OneWay}"
                    Width="{Binding Width,Mode=OneWay}" 
                   HorizontalAlignment="Center" VerticalAlignment="Center">
                <i:Interaction.Behaviors>
                    <behaviors:ImageBehavior
                        Record="{Binding}"
                        DecodeHeight="512"
                        DecodeWidth="512"
                        Quality="Resized"
                        />
                </i:Interaction.Behaviors>
            </Image>
                </Grid>
            </Viewbox>
        </Grid>

        <!-- Top Bar -->
        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Top"
              Background="{DynamicResource TopBarBackColor}">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <StackPanel
                Grid.Column="0"
                HorizontalAlignment="Left"
                VerticalAlignment="Top">

                <cc:FlatButton Content="{StaticResource BackSymbol}"
                        ToolTip="{x:Static properties:Resources.BackButton_ToolTip}"
                        Height="32"
                        HorizontalAlignment="Left"
                        Style="{StaticResource iconButtonStyle}"
                        Click="Button_Click"/>

            </StackPanel>


            <StackPanel Orientation="Horizontal" Grid.Column="2"
                        VerticalAlignment="Stretch">

                <cc:FlatButton
                    Content="{StaticResource PrevSymbol}"
                    Style="{StaticResource toolButtonStyle}"
                    ToolTip="{x:Static properties:Resources.PreviousImage}"
                    Command="{Binding PrevCommand}"/>

                <cc:FlatToggleButton
                    Content="{StaticResource PlaySymbol}"
                    Style="{StaticResource toolToggleButtonStyle}"
                    Visibility="{Binding IsExecuting.Value,
                    Converter={StaticResource FalseToVisibleConverter},Mode=OneWay}"
                    IsChecked="{Binding IsExecuting.Value,Mode=TwoWay}"
                    ToolTip="{x:Static properties:Resources.PlaySlideShow}"
                    />

                <cc:FlatToggleButton
                    Content="{StaticResource PauseSymbol}"
                    Style="{StaticResource toolToggleButtonStyle}"
                    Visibility="{Binding IsExecuting.Value,
                    Converter={StaticResource TrueToVisibleConverter},Mode=OneWay}"
                    IsChecked="{Binding IsExecuting.Value,Mode=TwoWay}"
                    ToolTip="{x:Static properties:Resources.PauseButton_Label}"
                    />

                <cc:FlatToggleButton
                    Content="{StaticResource ShuffleSymbol}"
                    Style="{StaticResource toolToggleButtonStyle}"
                    IsChecked="{Binding IsRandom.Value,Mode=TwoWay}"
                    ToolTip="{x:Static properties:Resources.ShuffleButton_Label}"
                    />
                <!--
                <ToggleButton
                    Width="{Binding IconWidth,Mode=OneWay}"
                    Content="Play"
                    ToolTipService.ToolTip="{StaticResource PlaySlideShowLabel}"
                    Visibility="{Binding IsExecuting.Value,Converter={StaticResource FalseToVisibleConverter},Mode=OneWay}"
                    IsChecked="{Binding IsExecuting.Value,Mode=TwoWay}"/>

                <ToggleButton
                        Width="{Binding IconWidth,Mode=OneWay}"
                    Content="Pause" x:Uid="PauseButton"
                    ToolTipService.ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Content}"
                    Visibility="{Binding IsExecuting.Value,Converter={StaticResource TrueToVisibleConverter},Mode=OneWay}"
                    IsChecked="{Binding IsExecuting.Value,Mode=TwoWay}"/>

                <ToggleButton
                        Width="{Binding IconWidth,Mode=OneWay}"
                    Content="Shuffle" x:Uid="ShuffleButton"
                    ToolTipService.ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Content}"
                    IsChecked="{Binding IsRandom.Value,Mode=TwoWay}"/>-->

                <cc:FlatButton
                    Content="{StaticResource NextSymbol}"
                    Style="{StaticResource toolButtonStyle}"
                    ToolTip="{x:Static properties:Resources.NextImage}"
                    Command="{Binding NextCommand}"/>

                <cc:FlatButton
                    Content="{StaticResource SettingSymbol}"
                    Style="{StaticResource toolButtonStyle}"
                    ToolTip="{x:Static properties:Resources.SlideshowSetting_Text}">
                    
                    <i:Interaction.Behaviors>
                        <behaviors:PopupDialogBehavior
                            IsHorizontalOverlay="True"
                            IsVerticalOverlay="False"
                            HorizontalContentAlignment="Right"
                            VerticalContentAlignment="Bottom"
                            Position="0,4,4,0"
                            IsMaskVisible="False">
                            <behaviors:PopupDialogBehavior.Content>
                                <Border
                                    Background="{StaticResource OptionPaneColor}"
                                    Width="Auto"
                                    BorderBrush="Gray"
                                    BorderThickness="1">
                                    <StackPanel Margin="0,8" Background="Transparent"
                                    DataContext="{Binding SettingViewModel,Mode=OneWay}">


                                        <TextBlock TextWrapping="Wrap"
                                                   Text="{x:Static properties:Resources.ResizeMethodText_Text}"/>
                                        <ComboBox Margin="0,7,0,0" HorizontalAlignment="Left"
                                                  MinWidth="170"
                                                  SelectedIndex="{Binding IsResizeToFill.Value,Mode=TwoWay,Converter={StaticResource BoolIntConverter}}">
                                            <ComboBoxItem
                                                Content="{x:Static properties:Resources.FitText_Content}"/>
                                            <ComboBoxItem
                                                Content="{x:Static properties:Resources.FillText_Content}"/>
                                        </ComboBox>
                                        
                                        <CheckBox
                                            IsChecked="{Binding IsResizingAlways.Value,Mode=TwoWay}"
                                            Content="{x:Static properties:Resources.ResizeSmallImageText_Text}"/>

                                        <CheckBox
                                            IsChecked="{Binding IsFullScreen.Value,Mode=TwoWay}"
                                            Content="{x:Static properties:Resources.FullscreenText_Text}"/>

                                        <TextBlock Text="{x:Static properties:Resources.DurationText_Text}"/>

                                        <TextBlock>
                                            <Run Text="{Binding FlipTimeSec.Value}"/>
                                            <Run Text=" "/>
                                            <Run Text="{x:Static properties:Resources.SecondsText_Text}"/>
                                        </TextBlock>

                                        <Slider Minimum="1" Maximum="60" SmallChange="1" LargeChange="5"
                                                Value="{Binding FlipTimeSec.Value,Mode=TwoWay}"
                                                tb:SliderBehavior.IsReceiveMouseWheel="True"/>

                                        <TextBlock Text="{x:Static properties:Resources.TransitionTimeText_Text}"/>

                                        <TextBlock>
                                            <Run Text="{Binding AnimationTimeSec.Value,StringFormat={}{0:0.##}}"/>
                                            <Run Text=" "/>
                                            <Run Text="{x:Static properties:Resources.SecondsText_Text}"/>
                                        </TextBlock>

                                        <Slider Minimum="0" Maximum="1" SmallChange="0.1" LargeChange="0.2"
                                                Value="{Binding AnimationTimeSec.Value,Mode=TwoWay}"
                                                tb:SliderBehavior.IsReceiveMouseWheel="True"
                                                AutoToolTipPrecision="2"
                                                >
                                        </Slider>
                                        
                                        <cc:FlatButton
                                            Style="{StaticResource contextMenuButtonStyle}">
                                            <TextBlock 
                                                Style="{StaticResource contextMenuTextStyle}"
                                                Margin="16,0"
                                                Text="{x:Static properties:Resources.CopyPath}"/>
                                        </cc:FlatButton>

                                        <cc:FlatButton
                                            Style="{StaticResource contextMenuButtonStyle}">
                                            <TextBlock 
                                                Style="{StaticResource contextMenuTextStyle}"
                                                Margin="16,0"
                                                Text="{x:Static properties:Resources.OpenFileLocation}"/>
                                        </cc:FlatButton>

                                        <cc:FlatButton
                                            Style="{StaticResource contextMenuButtonStyle}">
                                            <TextBlock 
                                                Style="{StaticResource contextMenuTextStyle}"
                                                Margin="16,0"
                                                Text="{x:Static properties:Resources.OpenWith}"/>
                                        </cc:FlatButton>
                                    </StackPanel>
                                </Border>
                            </behaviors:PopupDialogBehavior.Content>
                        </behaviors:PopupDialogBehavior>
                    </i:Interaction.Behaviors>
                </cc:FlatButton>


            </StackPanel>
        </Grid>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="SlideshowViewStates">
                <VisualState x:Name="Normal">
                    <Storyboard>
                    </Storyboard>
                </VisualState>

                <VisualState x:Name="Animating">
                    <Storyboard x:Name="animationStoryBoard">

                        <!-- Completed="Storyboard_Completed"
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Completed">
                                <i:InvokeCommandAction Command="{Binding Path=ChangeImageCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>-->

                        <DoubleAnimationUsingKeyFrames
                            Storyboard.TargetName="currentImage"
                            Storyboard.TargetProperty="Opacity">
                            <EasingDoubleKeyFrame 
                                x:Name="inAnimation"
                                Value="0"
                                KeyTime="500">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <ExponentialEase Exponent="1" EasingMode="EaseIn"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>

                        <DoubleAnimationUsingKeyFrames
                            Storyboard.TargetName="nextImage"
                            Storyboard.TargetProperty="Opacity">
                            <EasingDoubleKeyFrame
                                x:Name="outAnimation"
                                Value="1" 
                                KeyTime="500">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <ExponentialEase Exponent="1" EasingMode="EaseOut"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>

                    </Storyboard>
                </VisualState>

            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</UserControl>
