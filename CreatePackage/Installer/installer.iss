; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "ShibugakiViewer"
#define MyAppVersion "2.0.0"
#define MyAppPublisher "Boredbone"
#define MyAppURL "https://boredbone.github.io/ShibugakiViewer/"
#define MyAppExeName "ShibugakiViewer.exe"
#define MyInstallDirectory "ShibugakiViewer"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{284F3BFD-1E0B-41FA-87E8-0D1C06EBC473}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyInstallDirectory}
DisableDirPage=no
DefaultGroupName=MyProgramStartFolder
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
;PrivilegesRequiredOverridesAllowed=dialog
OutputDir=..\Package
OutputBaseFilename=ShibugakiViewerInstaller
SetupIconFile=..\..\ShibugakiViewer\Assets\Icons\appicon.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "japanese"; MessagesFile: "compiler:Languages\Japanese.isl"

#include <idp.iss>
#include <idplang\japanese.iss>

[CustomMessages]
english.RuntimeInstallationFailedMessage=The installation of the .NET Core runtime could not be verified. The application may not run.
japanese.RuntimeInstallationFailedMessage=.NET Core ランタイムのインストールを確認できませんでした。アプリケーションは実行できない可能性があります。

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Types]
Name: "NoRuntime"; Description: "Install All"; Check: IsNoRuntimeExists
Name: "CoreOnly"; Description: "Install Desktop"; Check: IsOnlyCoreRuntimeExists
Name: "HasRuntime"; Description: "Not Install Runtime"; Check: IsAllRuntimeExists

[Components]
Name: "Program"; Description: "Program Files"; Flags: fixed

Name: core; Description: ".NET Core Runtime"; Types: NoRuntime; Flags: checkablealone disablenouninstallwarning;
Name: desktop; Description: ".NET Core Desktop Runtime"; Types: CoreOnly NoRuntime; Flags: checkablealone disablenouninstallwarning;

[Files]
Source: "C:\Program Files (x86)\Inno Setup 6\Examples\MyProg.exe"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

Source: "..\..\RuntimeCheckerCore\bin\Release\netcoreapp3.0\RuntimeCheckerCore.deps.json"; DestDir: RuntimeCheckerCore; Flags: dontcopy
Source: "..\..\RuntimeCheckerCore\bin\Release\netcoreapp3.0\RuntimeCheckerCore.dll"; DestDir: RuntimeCheckerCore; Flags: dontcopy
Source: "..\..\RuntimeCheckerCore\bin\Release\netcoreapp3.0\RuntimeCheckerCore.exe"; DestDir: RuntimeCheckerCore; Flags: dontcopy
Source: "..\..\RuntimeCheckerCore\bin\Release\netcoreapp3.0\RuntimeCheckerCore.runtimeconfig.json"; DestDir: RuntimeCheckerCore; Flags: dontcopy

Source: "..\..\RuntimeCheckerDesktop\bin\Release\netcoreapp3.0\RuntimeCheckerDesktop.deps.json"; DestDir: RuntimeCheckerDesktop; Flags: dontcopy
Source: "..\..\RuntimeCheckerDesktop\bin\Release\netcoreapp3.0\RuntimeCheckerDesktop.dll"; DestDir: RuntimeCheckerDesktop; Flags: dontcopy
Source: "..\..\RuntimeCheckerDesktop\bin\Release\netcoreapp3.0\RuntimeCheckerDesktop.exe"; DestDir: RuntimeCheckerDesktop; Flags: dontcopy
Source: "..\..\RuntimeCheckerDesktop\bin\Release\netcoreapp3.0\RuntimeCheckerDesktop.runtimeconfig.json"; DestDir: RuntimeCheckerDesktop; Flags: dontcopy

Source: "..\..\ShibugakiViewer.Launcher.Net45\bin\Release\ShibugakiViewer.Launcher.Net45.exe"; DestDir: ShibugakiViewerLauncher; Flags: dontcopy
Source: "..\..\ShibugakiViewer.Launcher.Net45\bin\Release\ShibugakiViewer.Launcher.Net45.exe.config"; DestDir: ShibugakiViewerLauncher; Flags: dontcopy

#include "files.iss"
#include "removedfiles.iss"

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent


[Code]
const
  oldVersionProductIdDef='{E8E4B62C-D200-4411-81F9-324A942F180C}';
  oldVersionUpgradeCodeKey='SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\UpgradeCodes\13BE2E17FBA93A44898A7DD0AD01DA42';

  dotnetCore64Url = 'https://download.visualstudio.microsoft.com/download/pr/b3b81103-619a-48d8-ac1b-e03bbe153b7c/566b0f50872164abd1478a5b3ec38ffa/dotnet-runtime-3.0.0-win-x64.exe';
  dotnetCore86Url = 'https://download.visualstudio.microsoft.com/download/pr/ffc76eb1-6293-46e9-8d31-ad804995f870/ccf2eeafb0bdf336a092bfdd52a0dfca/dotnet-runtime-3.0.0-win-x86.exe';
  dotnetCore64DesktopUrl = 'https://download.visualstudio.microsoft.com/download/pr/fe9d105b-5d40-4f12-b238-6b6e1af9f812/341fc13950347d95fef8522cb3d77009/windowsdesktop-runtime-3.0.0-win-x64.exe';
  dotnetCore86DesktopUrl = 'https://download.visualstudio.microsoft.com/download/pr/03f6f2e1-bc0f-4185-b5c2-8399d5b3aac4/96f0664754609069159b7acd19772c77/windowsdesktop-runtime-3.0.0-win-x86.exe';

  dotnetCore64Filename = 'dotnet-runtime-3.0.0-win-x64.exe';
  dotnetCore86Filename = 'dotnet-runtime-3.0.0-win-x86.exe';
  dotnetCore64DesktopFilename = 'windowsdesktop-runtime-3.0.0-win-x64.exe';
  dotnetCore86DesktopFilename = 'windowsdesktop-runtime-3.0.0-win-x86.exe';


var
  runtimeLevel: Integer;


//==========================================================
function ShouldSkipPage(PageID: Integer): Boolean;
begin
  Result := (PageID = wpSelectComponents);
end;

//==========================================================
procedure InitializeWizard();
begin
  idpSetOption('AllowContinue',  '1');
  idpSetOption('DetailedMode',   '1');

  if IsWin64 then begin
    idpAddFileComp(dotnetCore64Url, ExpandConstant('{tmp}\')+dotnetCore64Filename,'core');
    idpAddFileComp(dotnetCore64DesktopUrl, ExpandConstant('{tmp}\')+dotnetCore64DesktopFilename,'desktop');
  end else begin
    idpAddFileComp(dotnetCore86Url, ExpandConstant('{tmp}\')+dotnetCore86Filename,'core');
    idpAddFileComp(dotnetCore86DesktopUrl, ExpandConstant('{tmp}\')+dotnetCore86DesktopFilename,'desktop');
  end;
  idpDownloadAfter(wpReady);

  Log('Setup dir'+ExpandConstant('{tmp}\'));
end;


//==========================================================
function UpdateReadyMemo(Space, NewLine, MemoUserInfoInfo, MemoDirInfo, MemoTypeInfo, MemoComponentsInfo, MemoGroupInfo, MemoTasksInfo: String): String;
begin
  Result := ''
  if MemoUserInfoInfo <> '' then begin
      Result := MemoUserInfoInfo + Newline + NewLine;
  end;
  if MemoDirInfo <> '' then begin
      Result := Result + MemoDirInfo + Newline + NewLine;
  end;
  //if MemoTypeInfo <> '' then begin
  //    Result := Result + MemoTypeInfo + Newline + NewLine;
  //end;
  if MemoComponentsInfo <> '' then begin
      Result := Result + MemoComponentsInfo + Newline + NewLine;
  end;
  if MemoGroupInfo <> '' then begin
      Result := Result + MemoGroupInfo + Newline + NewLine;
  end;
  if MemoTasksInfo <> '' then begin
      Result := Result + MemoTasksInfo + Newline + NewLine;
  end;
end;

//==========================================================
procedure ExitRunningApp;
var
  resultCode: Integer;
begin
  // Copy launcher and exit running app
  ExtractTemporaryFiles('ShibugakiViewerLauncher\*');
  Exec(ExpandConstant('{tmp}\')+'ShibugakiViewerLauncher\ShibugakiViewer.Launcher.Net45.exe' , '/qq', '', SW_HIDE, ewWaitUntilTerminated, resultCode);
end;

//==========================================================
function PrepareToInstall(var NeedsRestart: Boolean): String;
begin
  //TODO Copy launcher and exit running app
  Log('!!!PrepareToInstall');
  ExitRunningApp();
  MsgBox('PrepareToInstall', mbInformation, MB_OK);
end;


//==========================================================
function GetUninstallString(var productId: String): String;
var
  oldVerRegPath: String;
  uninstallString: String;
begin
  oldVerRegPath := ('SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\'+productId);
  Log('!!!oldVerRegPath='+oldVerRegPath);
  uninstallString := '';
  if RegQueryStringValue(HKLM, oldVerRegPath, 'UninstallString', uninstallString) then begin
    Result := uninstallString;
  end else if RegQueryStringValue(HKCU, oldVerRegPath, 'UninstallString', uninstallString) then begin
    Result := uninstallString;
  end else begin
    oldVerRegPath := ('SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\'+productId);
    Log('!!!oldVerRegPath='+oldVerRegPath);
    uninstallString := '';
    if RegQueryStringValue(HKLM, oldVerRegPath, 'UninstallString', uninstallString) then begin
      Result := uninstallString;
    end else if RegQueryStringValue(HKCU, oldVerRegPath, 'UninstallString', uninstallString) then begin
      Result := uninstallString;
    end;
  end;

  Result := uninstallString;
end;




//==========================================================
function GetProductIdFromUpgradeCode(): String;
var
  //resultCode: integer;
  Names: TArrayOfString;
  packedProductId: String;
  actualProductId: String;
begin
  Result := '';
  packedProductId:= '';
  actualProductId:= 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';

  if RegGetValueNames(HKLM, oldVersionUpgradeCodeKey, Names) then begin
    if GetArrayLength(Names) > 0 then
      packedProductId := Names[0];
  end else begin
    // add any code to handle failure here
    Log('fail '+IntToStr(GetArrayLength(Names)));
  end;

  if IsWin64 then begin
    if RegGetValueNames(HKLM64, oldVersionUpgradeCodeKey, Names) then begin
      if GetArrayLength(Names) > 0 then
        packedProductId := Names[0];
    end else begin
      // add any code to handle failure here
      Log('64 fail '+IntToStr(GetArrayLength(Names)));
    end;
  end;

  if (Length(packedProductId) = 32) then begin
    actualProductId[1]:=packedProductId[8];
    actualProductId[2]:=packedProductId[7];
    actualProductId[3]:=packedProductId[6];
    actualProductId[4]:=packedProductId[5];
    actualProductId[5]:=packedProductId[4];
    actualProductId[6]:=packedProductId[3];
    actualProductId[7]:=packedProductId[2];
    actualProductId[8]:=packedProductId[1];

    actualProductId[10]:=packedProductId[12];
    actualProductId[11]:=packedProductId[11];
    actualProductId[12]:=packedProductId[10];
    actualProductId[13]:=packedProductId[9];

    actualProductId[15]:=packedProductId[16];
    actualProductId[16]:=packedProductId[15];
    actualProductId[17]:=packedProductId[14];
    actualProductId[18]:=packedProductId[13];

    actualProductId[20]:=packedProductId[18];
    actualProductId[21]:=packedProductId[17];
    actualProductId[22]:=packedProductId[20];
    actualProductId[23]:=packedProductId[19];

    actualProductId[25]:=packedProductId[22];
    actualProductId[26]:=packedProductId[21];
    actualProductId[27]:=packedProductId[24];
    actualProductId[28]:=packedProductId[23];
    actualProductId[29]:=packedProductId[26];
    actualProductId[30]:=packedProductId[25];
    actualProductId[31]:=packedProductId[28];
    actualProductId[32]:=packedProductId[27];
    actualProductId[33]:=packedProductId[30];
    actualProductId[34]:=packedProductId[29];
    actualProductId[35]:=packedProductId[32];
    actualProductId[36]:=packedProductId[31];

    Result := actualProductId;
  end;
  Log('prod='+actualProductId);
  //MsgBox('prod='+actualProductId, mbInformation, MB_OK);
end;

//==========================================================
function UninstallOldVersion(): Integer;
var
  uninstallString: String;
  uninstallOption: String;
  oldVersionProductId: String;
  resultCode: Integer;
begin
  Log('!!!UninstallOldVersion');

  //  default return value
  Result := 0;
  oldVersionProductId := oldVersionProductIdDef;

  // get the uninstall string of the old app
  uninstallString := GetUninstallString(oldVersionProductId);
  if (uninstallString = '') then begin
    oldVersionProductId := GetProductIdFromUpgradeCode();
    if (oldVersionProductId <> '') then
      oldVersionProductId := '{'+oldVersionProductId+'}';
    uninstallString := GetUninstallString(oldVersionProductId);
  end;

  //MsgBox('prod act='+oldVersionProductId+', uninstall='+uninstallString, mbInformation, MB_OK);

  if (uninstallString <> '') then begin

    uninstallOption:=('/x '+oldVersionProductId+' REBOOT=ReallySuppress /qb-');

    Log('!!!uninstallOption='+uninstallOption+', uninstall='+uninstallString);
    MsgBox('uninstallOption='+uninstallOption+', uninstall='+uninstallString, mbInformation, MB_OK);

    if Exec('msiexec.exe', uninstallOption,'', SW_HIDE, ewWaitUntilTerminated, resultCode) then begin
      Result := 1
    end else begin
      Result := 2;
    end;
  end else begin
    Result := 0;
  end;
end;

//==========================================================
procedure UpdateRuntimeLevel;
var
  resultCode: Integer;
begin
  if runtimeLevel <=0 then
  begin
    // Copy checker app and run

    ExtractTemporaryFiles('RuntimeCheckerCore\*');
    Exec(ExpandConstant('{tmp}\')+'RuntimeCheckerCore\RuntimeCheckerCore.exe' , '', '', SW_HIDE, ewWaitUntilTerminated, resultCode);
    if (resultCode > 0) then begin
      // Core runtime exists
      ExtractTemporaryFiles('RuntimeCheckerDesktop\*');
      Exec(ExpandConstant('{tmp}\')+'RuntimeCheckerDesktop\RuntimeCheckerDesktop.exe' , '', '', SW_HIDE, ewWaitUntilTerminated, resultCode);
      if (resultCode > 0) then begin
        // Desktop runtime exists
        runtimeLevel:=1;
      end else begin
        // Core only
        runtimeLevel:=2;
      end;
    end else begin
      // No runtime
      runtimeLevel:=3;
    end;

    Log('runtimeLevel=' + IntToStr(runtimeLevel));
    //1:core&desktop 2:core 3:none
  end;
end;

//==========================================================
procedure InstallRuntime();
var
  resultCode: Integer;
begin
  if IsWin64 then begin
    Exec(ExpandConstant('{tmp}\')+dotnetCore64Filename,'/install /passive /norestart','',SW_SHOW,ewWaitUntilTerminated,resultCode);
    Exec(ExpandConstant('{tmp}\')+dotnetCore64DesktopFilename,'/install /passive /norestart','',SW_SHOW,ewWaitUntilTerminated,resultCode);
  end else begin
    Exec(ExpandConstant('{tmp}\')+dotnetCore86Filename,'/install /passive /norestart','',SW_SHOW,ewWaitUntilTerminated,resultCode);
    Exec(ExpandConstant('{tmp}\')+dotnetCore86DesktopFilename,'/install /passive /norestart','',SW_SHOW,ewWaitUntilTerminated,resultCode);
  end;

  runtimeLevel := 0;
  UpdateRuntimeLevel();
  //MsgBox('runtimeLevel=' + IntToStr(runtimeLevel), mbInformation, MB_OK);
  if (runtimeLevel <> 1) then begin
    MsgBox(CustomMessage('RuntimeInstallationFailedMessage'), mbInformation, MB_OK);
  end;


end;


//==========================================================
procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep = ssInstall) then begin
    UninstallOldVersion();
    // Install .NET Core Runtime
    InstallRuntime()
  end else if (CurStep = ssPostInstall) then begin
  end;
end;

//==========================================================
procedure CurPageChanged(CurPageID: Integer);
begin
  case CurPageID of
    wpSelectDir:
    begin
      if (IsAdminLoggedOn or IsPowerUserLoggedOn) then begin
        Log('admin user');
      end else begin
        Log('pos=' + IntToStr(pos(ExpandConstant('{pf}'),WizardForm.DirEdit.Text)));
        if (pos(ExpandConstant('{pf}'),WizardForm.DirEdit.Text) = 1) then begin
          Log('dir bef=' + WizardForm.DirEdit.Text);
          WizardForm.DirEdit.Text := ExpandConstant('{localappdata}\{#MyInstallDirectory}');
          Log('dir aft=' + WizardForm.DirEdit.Text);
        end;
      end;
    end;
  end;
end;

//==========================================================
function IsAllRuntimeExists: Boolean;
begin
  UpdateRuntimeLevel();
  Result :=(runtimeLevel = 1);
end;

//==========================================================
function IsOnlyCoreRuntimeExists: Boolean;
begin
  UpdateRuntimeLevel();
  Result :=(runtimeLevel = 2);
end;

//==========================================================
function IsNoRuntimeExists: Boolean;
begin
  UpdateRuntimeLevel();
  Result :=(runtimeLevel >= 3);
end;

//==========================================================
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  case CurUninstallStep of
    usUninstall:
      begin
        ExitRunningApp();
        MsgBox('CurUninstallStepChanged:' #13#13 'Uninstall is about to start.', mbInformation, MB_OK)
        // ...insert code to perform pre-uninstall tasks here...
      end;
    usPostUninstall:
      begin
        //MsgBox('CurUninstallStepChanged:' #13#13 'Uninstall just finished.', mbInformation, MB_OK);
        // ...insert code to perform post-uninstall tasks here...
      end;
  end;
end;